parameters:
  - name: celestiaRpcUrl
    type: string
  - name: celestiaGatewayUrl
    type: string
  - name: testResultsFiles
    type: string
    default: '**/test-results.xml'
  - name: reportPath
    type: string
    default: playwright-report
  - name: artifactName
    type: string
    default: playwright-report
  - name: testingSteps
    type: object
    default:
      runTests: true
      publishResults: false

steps:
  # Setup Node.js and dependencies before running tests
  - ${{ if parameters.testingSteps.runTests }}:
    - checkout: self
      displayName: üì• Checkout source code

    - task: NodeTool@0
      displayName: '‚öôÔ∏è Setup Node.js'
      inputs:
        versionSpec: '24.x'

    - task: Bash@3
      displayName: ‚öôÔ∏è Install Dependencies
      inputs:
        targetType: 'inline'
        script: |
          echo "Installing npm dependencies..."
          npm ci
          echo "Dependencies installed successfully!"

    - task: Bash@3
      displayName: '‚öôÔ∏è Install playwright'
      inputs:
        targetType: 'inline'
        script: |
          echo "Installing Playwright..."
          npx playwright install --with-deps
          echo "Playwright installed successfully!"

    - task: Bash@3
      displayName: 'üîí Verify Security Configuration'
      inputs:
        targetType: 'inline'
        script: |
          echo "üîí Verifying firewall and security configuration..."

          # Extract host from the RPC URL for SSH connection
          REMOTE_HOST=$(echo "${{ parameters.celestiaRpcUrl }}" | sed 's|http://||' | cut -d':' -f1)
          echo "üåê Remote host: $REMOTE_HOST"

          # Connect to remote host and verify firewall rules
          ssh -i ~/.ssh/${SSH_KEY_FILE} ${REMOTE_USER}@${REMOTE_HOST} << 'EOF'
          set -e

          echo "üõ°Ô∏è Checking UFW firewall status..."

          # Check if UFW is installed (should be from previous stage)
          if ! command -v ufw &> /dev/null; then
            echo "‚ùå UFW is not installed! The security configuration stage may have failed."
            echo "üîç Checking if security stage completed properly..."
            exit 1
          fi

          # Verify UFW is active
          UFW_STATUS=$(sudo ufw status | head -n1)
          if echo "$UFW_STATUS" | grep -q "Status: active"; then
            echo "‚úÖ UFW firewall is active"
          else
            echo "‚ùå UFW firewall is not active! Expected it to be configured in security stage."
            echo "üìä Current UFW status: $UFW_STATUS"
            exit 1
          fi

          # Show current firewall rules
          echo "üìä Current firewall rules:"
          sudo ufw status verbose

          # Verify specific port rules
          echo "üîç Verifying specific port configurations..."

          # Check SSH ports
          if sudo ufw status | grep -q "22/tcp"; then
            echo "‚úÖ Port 22 (SSH) is configured"
          else
            echo "‚ùå Port 22 (SSH) is not configured!"
            exit 1
          fi

          if sudo ufw status | grep -q "2121/tcp"; then
            echo "‚úÖ Port 2121 (Internet access) is configured"
          else
            echo "‚ùå Port 2121 (Internet access) is not configured!"
            exit 1
          fi

          # Check if rate limiting is applied to port 22
          if sudo ufw status verbose | grep -q "22/tcp.*LIMIT"; then
            echo "‚úÖ Port 22 has rate limiting enabled"
          else
            echo "‚ö†Ô∏è  Port 22 rate limiting not detected (may be configured differently)"
          fi

          # Check if port 2121 has no UFW rate limiting (but may have iptables limiting)
          if sudo ufw status verbose | grep "2121/tcp" | grep -q "LIMIT"; then
            echo "‚ö†Ô∏è  Port 2121 has UFW rate limiting (unexpected)"
          else
            echo "‚úÖ Port 2121 has no UFW rate limiting (iptables limiting configured separately)"
          fi

          # Verify default policies
          echo "üîç Checking default policies..."
          UFW_VERBOSE=$(sudo ufw status verbose)

          if echo "$UFW_VERBOSE" | grep -q "deny (incoming)"; then
            echo "‚úÖ Default incoming policy is deny"
          else
            echo "‚ùå Default incoming policy is not deny!"
            exit 1
          fi

          if echo "$UFW_VERBOSE" | grep -q "allow (outgoing)"; then
            echo "‚úÖ Default outgoing policy is allow"
          else
            echo "‚ùå Default outgoing policy is not allow!"
            echo "üîç Debug - UFW status output:"
            echo "$UFW_VERBOSE"
            exit 1
          fi

          # Additional security checks
          echo "üîç Checking active network connections..."
          echo "üìä Listening ports:"
          sudo netstat -tlnp | grep -E ':(22|2121)\s' || echo "No SSH ports found listening"

          echo "‚ÑπÔ∏è  Note: Port 22 is SSH-only, Port 2121 is for general internet access"
          echo "‚ÑπÔ∏è  Celestia RPC/Gateway ports are not checked as no trusted IPs were configured"
          echo "‚úÖ Security configuration verification completed successfully!"
          EOF
      env:
        SSH_KEY_FILE: $(SSH_KEY_FILE)
        REMOTE_USER: $(REMOTE_USER)

    - task: Bash@3
      displayName: 'üé≠ Test Celestia Light Node'
      inputs:
        targetType: 'inline'
        script: |
          npx playwright test --grep=@DeploymentWorkflow --project=pipeline --timeout=600000
      env:
        CELESTIA_RPC_URL: ${{ parameters.celestiaRpcUrl }}
        CELESTIA_GATEWAY_URL: ${{ parameters.celestiaGatewayUrl }}

  # Publish Test Results (if requested)
  - ${{ if parameters.testingSteps.publishResults }}:
    - template: publish.yml
      parameters:
        testResultsFiles: ${{ parameters.testResultsFiles }}
        targetPath: ${{ parameters.reportPath }}
        artifact: ${{ parameters.artifactName }}
